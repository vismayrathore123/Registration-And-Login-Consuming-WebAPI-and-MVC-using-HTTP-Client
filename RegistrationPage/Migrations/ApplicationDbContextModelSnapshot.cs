// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RegistrationPage.Data;

#nullable disable

namespace RegistrationPage.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("RegistrationPage.Models.Registration", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MobileNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("registrations");
                });
#pragma warning restore 612, 618
        }
    }


public static class ApplicationDbContextModelSnapshotEndpoints
{
	public static void MapApplicationDbContextModelSnapshotEndpoints (this IEndpointRouteBuilder routes)
    {
        routes.MapGet("/api/ApplicationDbContextModelSnapshot", () =>
        {
            return new [] { new ApplicationDbContextModelSnapshot() };
        })
        .WithName("GetAllApplicationDbContextModelSnapshots")
        .Produces<ApplicationDbContextModelSnapshot[]>(StatusCodes.Status200OK);

        routes.MapGet("/api/ApplicationDbContextModelSnapshot/{id}", (int id) =>
        {
            //return new ApplicationDbContextModelSnapshot { ID = id };
        })
        .WithName("GetApplicationDbContextModelSnapshotById")
        .Produces<ApplicationDbContextModelSnapshot>(StatusCodes.Status200OK);

        routes.MapPut("/api/ApplicationDbContextModelSnapshot/{id}", (int id, ApplicationDbContextModelSnapshot input) =>
        {
            return Results.NoContent();
        })
        .WithName("UpdateApplicationDbContextModelSnapshot")
        .Produces(StatusCodes.Status204NoContent);

        routes.MapPost("/api/ApplicationDbContextModelSnapshot/", (ApplicationDbContextModelSnapshot model) =>
        {
            //return Results.Created($"//api/ApplicationDbContextModelSnapshots/{model.ID}", model);
        })
        .WithName("CreateApplicationDbContextModelSnapshot")
        .Produces<ApplicationDbContextModelSnapshot>(StatusCodes.Status201Created);

        routes.MapDelete("/api/ApplicationDbContextModelSnapshot/{id}", (int id) =>
        {
            //return Results.Ok(new ApplicationDbContextModelSnapshot { ID = id });
        })
        .WithName("DeleteApplicationDbContextModelSnapshot")
        .Produces<ApplicationDbContextModelSnapshot>(StatusCodes.Status200OK);
    }
}}
